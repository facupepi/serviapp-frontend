import { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { Eye, EyeOff, Mail, Lock, AlertCircle } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

export default function Login() {
  const navigate = useNavigate();
  const { login, loginAttempts, isBlocked } = useAuth();
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [loading, setLoading] = useState(false);

  const handleInputChange = (field: keyof typeof formData, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    // Limpiar error del campo
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.email.trim()) {
      newErrors.email = 'El email es requerido';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'El email no es v√°lido';
    }

    if (!formData.password) {
      newErrors.password = 'La contrase√±a es requerida';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e?: React.FormEvent) => {
    if (e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    console.log('üîê handleSubmit llamado, estado actual:', { loading, isBlocked });
    
    if (isBlocked) {
      console.log('üö´ Login bloqueado');
      setErrors({ form: 'Tu cuenta est√° bloqueada por 10 minutos debido a m√∫ltiples intentos fallidos' });
      return;
    }

    if (!validateForm()) {
      console.log('‚ùå Validaci√≥n fall√≥');
      return;
    }

    if (loading) {
      console.log('‚è≥ Ya hay un login en proceso');
      return;
    }

    console.log('üöÄ Iniciando proceso de login...');
    setLoading(true);
    setErrors({});
    
    try {
      console.log('ÔøΩ Llamando a funci√≥n login...');
      const result = await login(formData.email, formData.password);
      
      console.log('üìä Resultado del login:', result);
      
      if (result.success) {
        console.log('‚úÖ Login exitoso, navegando al dashboard...');
        setLoading(false);
        navigate('/dashboard');
      } else {
        console.log('‚ùå Login fall√≥:', result.error);
        setErrors({ form: result.error || 'Error al iniciar sesi√≥n' });
        console.log('‚è≥ Manteniendo estado por 3 segundos para revisar logs...');
        setTimeout(() => {
          console.log('üîÑ Reseteando loading autom√°ticamente');
          setLoading(false);
        }, 3000);
      }
    } catch (error) {
      console.error('üí• Error en catch del handleSubmit:', error);
      setErrors({ form: 'Error al iniciar sesi√≥n - ' + (error as Error).message });
      console.log('‚è≥ Manteniendo estado por 3 segundos para revisar logs...');
      setTimeout(() => {
        console.log('üîÑ Reseteando loading autom√°ticamente');
        setLoading(false);
      }, 3000);
    }
    
    console.log('üèÅ handleSubmit terminado');
  };

  // Funci√≥n de debug para probar login directo con backend
  const debugLoginCall = async () => {
    try {
      console.log('üß™ Iniciando debug del login...');
      
      const testCredentials = {
        email: "debug1757291771105@test.com", // Email del usuario que registramos antes
        password: "Password123"
      };

      console.log('üì§ Enviando credenciales de debug:', testCredentials);

      const response = await fetch('https://iycds2025api-production.up.railway.app/api/user/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testCredentials)
      });

      console.log('üì• Response status:', response.status);
      console.log('üì• Response headers:', Object.fromEntries(response.headers.entries()));

      const responseText = await response.text();
      console.log('üì• Response text raw:', responseText);

      try {
        const responseJson = JSON.parse(responseText);
        console.log('üì• Response JSON:', responseJson);
      } catch (parseError) {
        console.error('‚ùå Error parsing JSON:', parseError);
      }

    } catch (error) {
      console.error('‚ùå Error en debug login call:', error);
    }
  };

  // Funci√≥n para llenar datos del usuario registrado
  const fillRegisteredUserData = () => {
    setFormData({
      email: 'debug1757291771105@test.com', // Email del usuario que registramos
      password: 'Password123'
    });
    setErrors({});
    setLoading(false); // Resetear loading state tambi√©n
  };

  // Funci√≥n para resetear el estado despu√©s de ver logs
  const resetFormState = () => {
    setLoading(false);
    setErrors({});
    console.log('üîÑ Estado del formulario reseteado');
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Iniciar sesi√≥n
        </h2>
        <p className="mt-2 text-center text-sm text-gray-600">
          ¬øNo tienes cuenta?{' '}
          <Link
            to="/register"
            className="font-medium text-blue-600 hover:text-blue-500"
          >
            Reg√≠strate aqu√≠
          </Link>
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
          {/* Botones de debug - REMOVER EN PRODUCCI√ìN */}
          <div className="mb-6 space-y-2">
            <button
              type="button"
              onClick={fillRegisteredUserData}
              className="w-full px-4 py-2 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200 border border-green-300"
            >
              üß™ Usar usuario registrado (DEBUG)
            </button>
            <button
              type="button"
              onClick={debugLoginCall}
              className="w-full px-4 py-2 text-sm bg-orange-100 text-orange-700 rounded-md hover:bg-orange-200 border border-orange-300"
            >
              üîç Debug Login Call (Ver consola)
            </button>
            {(loading || errors.form) && (
              <button
                type="button"
                onClick={resetFormState}
                className="w-full px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 border border-gray-300"
              >
                üîÑ Resetear estado (despu√©s de ver logs)
              </button>
            )}
          </div>

          {/* Usuarios de prueba */}
          <div className="mb-6 p-4 bg-blue-50 rounded-lg">
            <h3 className="text-sm font-medium text-blue-900 mb-2">Usuarios de prueba:</h3>
            <div className="text-xs text-blue-700 space-y-1">
              <p><strong>Cliente:</strong> ana@email.com / password123</p>
              <p><strong>Proveedor:</strong> carlos@email.com / password123</p>
            </div>
          </div>

          <div className="space-y-6">
            {errors.form && (
              <div className="flex items-center p-4 bg-red-50 border border-red-200 rounded-lg">
                <AlertCircle className="h-5 w-5 text-red-600 mr-2" />
                <span className="text-red-700 text-sm">{errors.form}</span>
              </div>
            )}

            {isBlocked && (
              <div className="flex items-center p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                <AlertCircle className="h-5 w-5 text-yellow-600 mr-2" />
                <span className="text-yellow-700 text-sm">
                  Cuenta bloqueada por 10 minutos debido a m√∫ltiples intentos fallidos
                </span>
              </div>
            )}

            {loginAttempts > 0 && !isBlocked && (
              <div className="text-center text-sm text-gray-600">
                Intentos restantes: {5 - loginAttempts}
              </div>
            )}

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <div className="mt-1 relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Mail className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      e.preventDefault();
                      handleSubmit();
                    }
                  }}
                  className={`block w-full pl-10 pr-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.email ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="tu@email.com"
                />
              </div>
              {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                Contrase√±a
              </label>
              <div className="mt-1 relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Lock className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  id="password"
                  name="password"
                  type={showPassword ? 'text' : 'password'}
                  autoComplete="current-password"
                  value={formData.password}
                  onChange={(e) => handleInputChange('password', e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      e.preventDefault();
                      handleSubmit();
                    }
                  }}
                  className={`block w-full pl-10 pr-10 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                    errors.password ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                >
                  {showPassword ? (
                    <EyeOff className="h-5 w-5 text-gray-400" />
                  ) : (
                    <Eye className="h-5 w-5 text-gray-400" />
                  )}
                </button>
              </div>
              {errors.password && <p className="text-red-500 text-sm mt-1">{errors.password}</p>}
            </div>

            <div className="flex items-center justify-between">
              <div className="text-sm">
                <Link
                  to="/recuperar-password"
                  className="font-medium text-blue-600 hover:text-blue-500"
                >
                  ¬øOlvidaste tu contrase√±a?
                </Link>
              </div>
            </div>

            <div>
              <button
                type="button"
                disabled={loading || isBlocked}
                onClick={async (e) => {
                  console.log('üñ±Ô∏è Bot√≥n de login clickeado');
                  e.preventDefault();
                  e.stopPropagation();
                  
                  // Prevenir doble env√≠o
                  if (loading) {
                    console.log('‚è≥ Login ya en proceso, ignorando click');
                    return;
                  }
                  
                  // Llamar directamente a la funci√≥n de manejo
                  console.log('üìû Llamando a handleSubmit desde onClick');
                  await handleSubmit();
                }}
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? (
                  <div className="flex items-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Iniciando sesi√≥n...
                  </div>
                ) : (
                  'Iniciar sesi√≥n'
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
